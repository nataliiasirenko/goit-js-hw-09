{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,QAASC,SAASC,cAAc,SAChCC,SAAUF,SAASC,cAAc,mBACjCE,QAASH,SAASC,cAAc,iBAChCG,UAAWJ,SAASC,cAAc,mBAClCI,OAAQL,SAASC,cAAc,oBAGjCH,EAAKC,QAAQO,iBAAiB,UAAUC,IACtCA,EAAEC,iBAEF,MAAMC,EAASC,OAAOZ,EAAKM,UAAUO,OACrC,IAAIC,EAAQF,OAAOZ,EAAKI,SAASS,OACjC,MAAME,EAAOH,OAAOZ,EAAKK,QAAQQ,OAEjCb,EAAKC,QAAQe,QAEoC,IAA5C,IAAIC,EAAW,EAAGA,GAAYN,EAAQM,GAAY,EACrDC,EAAcD,EAAUH,GACrBK,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBC,EAAAxB,GAASyB,OAAOC,QACd,uBAAqBJ,QAAiBC,MAAU,IAGnDI,OAAM,EAACL,SAAEA,EAAQC,MAAEA,MAClBC,EAAAxB,GAASyB,OAAOG,QACd,sBAAoBN,QAAeC,MAAU,IAGnDP,GAASC,C,IAIb,MAAMG,EAAgB,CAACE,EAAUC,KAC/B,MAAMM,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEX,E,MAAUC,IAEpBW,EAAO,C,SAAEZ,E,MAAUC,GAAQ,GAE5BA,EAAM,GACT","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEll: document.querySelector('.form'),\n  delayEll: document.querySelector(`[name=\"delay\" ]`),\n  stepEll: document.querySelector(`[name=\"step\"]`),\n  amountEll: document.querySelector(`[name=\"amount\"]`),\n  btnEll: document.querySelector(`[type=\"submit\"]`),\n};\n\nrefs.formEll.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const amount = Number(refs.amountEll.value);\n  let delay = Number(refs.delayEll.value);\n  const step = Number(refs.stepEll.value);\n\n  refs.formEll.reset();\n  // перебираємо проміс і на кожній ітерації створюємо проміс\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n});\n\nconst createPromise = (position, delay) => {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","formEll","document","querySelector","delayEll","stepEll","amountEll","btnEll","addEventListener","e","preventDefault","amount","Number","value","delay1","step","reset","position1","$47d4ff9957288465$var$createPromise","then","position","delay","$parcel$interopDefault","Notify","success","catch","failure","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.1101b5b2.js.map"}